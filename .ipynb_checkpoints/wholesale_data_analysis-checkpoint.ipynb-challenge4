{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "dc0318d6",
   "metadata": {},
   "source": [
    "## Part 1: Explore the Data\n",
    "\n",
    "Import the data and use Pandas to learn more about the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e076f57f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>first</th>\n",
       "      <th>last</th>\n",
       "      <th>job</th>\n",
       "      <th>phone</th>\n",
       "      <th>email</th>\n",
       "      <th>client_id</th>\n",
       "      <th>order_id</th>\n",
       "      <th>order_date</th>\n",
       "      <th>order_week</th>\n",
       "      <th>order_year</th>\n",
       "      <th>item_id</th>\n",
       "      <th>category</th>\n",
       "      <th>subcategory</th>\n",
       "      <th>unit_price</th>\n",
       "      <th>unit_cost</th>\n",
       "      <th>unit_weight</th>\n",
       "      <th>qty</th>\n",
       "      <th>line_number</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Donald</td>\n",
       "      <td>Harding</td>\n",
       "      <td>Immunologist</td>\n",
       "      <td>793-904-7725x39308</td>\n",
       "      <td>harding.donald.7185@sullivan.com</td>\n",
       "      <td>58515</td>\n",
       "      <td>8953482</td>\n",
       "      <td>2023-04-28</td>\n",
       "      <td>17</td>\n",
       "      <td>2023</td>\n",
       "      <td>EUD29711-63-6U</td>\n",
       "      <td>decor</td>\n",
       "      <td>wall art</td>\n",
       "      <td>1096.80</td>\n",
       "      <td>762.71</td>\n",
       "      <td>7.50</td>\n",
       "      <td>105</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Tiffany</td>\n",
       "      <td>Myers</td>\n",
       "      <td>Music therapist</td>\n",
       "      <td>201.442.4543x942</td>\n",
       "      <td>myers.t.6537@ferguson-johnson.net</td>\n",
       "      <td>37609</td>\n",
       "      <td>8069089</td>\n",
       "      <td>2023-05-19</td>\n",
       "      <td>20</td>\n",
       "      <td>2023</td>\n",
       "      <td>XDA18116-89-4A</td>\n",
       "      <td>consumables</td>\n",
       "      <td>pens</td>\n",
       "      <td>24.95</td>\n",
       "      <td>15.09</td>\n",
       "      <td>1.49</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Shannon</td>\n",
       "      <td>Watson</td>\n",
       "      <td>Immunologist</td>\n",
       "      <td>687.737.9424x8503</td>\n",
       "      <td>swatson8146@payne.net</td>\n",
       "      <td>57113</td>\n",
       "      <td>1902144</td>\n",
       "      <td>2023-01-29</td>\n",
       "      <td>4</td>\n",
       "      <td>2023</td>\n",
       "      <td>ABE59463-05-7E</td>\n",
       "      <td>software</td>\n",
       "      <td>project management</td>\n",
       "      <td>13.52</td>\n",
       "      <td>7.86</td>\n",
       "      <td>1.68</td>\n",
       "      <td>39</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Nathan</td>\n",
       "      <td>Baker</td>\n",
       "      <td>Accounting technician</td>\n",
       "      <td>827-788-8123x012</td>\n",
       "      <td>bakernathan@benson.com</td>\n",
       "      <td>46554</td>\n",
       "      <td>9031802</td>\n",
       "      <td>2023-04-25</td>\n",
       "      <td>17</td>\n",
       "      <td>2023</td>\n",
       "      <td>ZMM00836-65-0C</td>\n",
       "      <td>consumables</td>\n",
       "      <td>pens</td>\n",
       "      <td>36.42</td>\n",
       "      <td>24.85</td>\n",
       "      <td>1.23</td>\n",
       "      <td>29</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Christina</td>\n",
       "      <td>Schwartz</td>\n",
       "      <td>Chiropractor</td>\n",
       "      <td>265-829-3643</td>\n",
       "      <td>christinaschwartz9252@mcconnell.com</td>\n",
       "      <td>92089</td>\n",
       "      <td>1322274</td>\n",
       "      <td>2023-05-28</td>\n",
       "      <td>21</td>\n",
       "      <td>2023</td>\n",
       "      <td>BZX55559-12-3X</td>\n",
       "      <td>consumables</td>\n",
       "      <td>misc</td>\n",
       "      <td>195.10</td>\n",
       "      <td>108.17</td>\n",
       "      <td>46.43</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       first      last                    job               phone  \\\n",
       "0     Donald   Harding           Immunologist  793-904-7725x39308   \n",
       "1    Tiffany     Myers        Music therapist    201.442.4543x942   \n",
       "2    Shannon    Watson           Immunologist   687.737.9424x8503   \n",
       "3     Nathan     Baker  Accounting technician    827-788-8123x012   \n",
       "4  Christina  Schwartz           Chiropractor        265-829-3643   \n",
       "\n",
       "                                 email  client_id  order_id  order_date  \\\n",
       "0     harding.donald.7185@sullivan.com      58515   8953482  2023-04-28   \n",
       "1    myers.t.6537@ferguson-johnson.net      37609   8069089  2023-05-19   \n",
       "2                swatson8146@payne.net      57113   1902144  2023-01-29   \n",
       "3               bakernathan@benson.com      46554   9031802  2023-04-25   \n",
       "4  christinaschwartz9252@mcconnell.com      92089   1322274  2023-05-28   \n",
       "\n",
       "   order_week  order_year         item_id     category         subcategory  \\\n",
       "0          17        2023  EUD29711-63-6U        decor            wall art   \n",
       "1          20        2023  XDA18116-89-4A  consumables                pens   \n",
       "2           4        2023  ABE59463-05-7E     software  project management   \n",
       "3          17        2023  ZMM00836-65-0C  consumables                pens   \n",
       "4          21        2023  BZX55559-12-3X  consumables                misc   \n",
       "\n",
       "   unit_price  unit_cost  unit_weight  qty  line_number  \n",
       "0     1096.80     762.71         7.50  105            1  \n",
       "1       24.95      15.09         1.49   21            0  \n",
       "2       13.52       7.86         1.68   39            6  \n",
       "3       36.42      24.85         1.23   29            3  \n",
       "4      195.10     108.17        46.43   20            1  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv('Resources/client_dataset.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "71b9bbd2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['first', 'last', 'job', 'phone', 'email', 'client_id', 'order_id',\n",
       "       'order_date', 'order_week', 'order_year', 'item_id', 'category',\n",
       "       'subcategory', 'unit_price', 'unit_cost', 'unit_weight', 'qty',\n",
       "       'line_number'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# View the column names in the data\n",
    "df.columns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bc0f4172",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>client_id</th>\n",
       "      <th>order_id</th>\n",
       "      <th>order_week</th>\n",
       "      <th>order_year</th>\n",
       "      <th>unit_price</th>\n",
       "      <th>unit_cost</th>\n",
       "      <th>unit_weight</th>\n",
       "      <th>qty</th>\n",
       "      <th>line_number</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>54639.000000</td>\n",
       "      <td>5.463900e+04</td>\n",
       "      <td>54639.000000</td>\n",
       "      <td>54639.000000</td>\n",
       "      <td>54639.000000</td>\n",
       "      <td>54639.000000</td>\n",
       "      <td>54639.000000</td>\n",
       "      <td>5.463900e+04</td>\n",
       "      <td>54639.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>54837.869416</td>\n",
       "      <td>5.470190e+06</td>\n",
       "      <td>11.359139</td>\n",
       "      <td>2022.993064</td>\n",
       "      <td>136.267207</td>\n",
       "      <td>99.446073</td>\n",
       "      <td>5.004116</td>\n",
       "      <td>5.702646e+02</td>\n",
       "      <td>2.979667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>25487.438231</td>\n",
       "      <td>2.599807e+06</td>\n",
       "      <td>7.023499</td>\n",
       "      <td>0.082997</td>\n",
       "      <td>183.873135</td>\n",
       "      <td>133.164267</td>\n",
       "      <td>5.326599</td>\n",
       "      <td>1.879552e+04</td>\n",
       "      <td>2.436320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>10033.000000</td>\n",
       "      <td>1.000886e+06</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2022.000000</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>33593.000000</td>\n",
       "      <td>3.196372e+06</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2023.000000</td>\n",
       "      <td>20.800000</td>\n",
       "      <td>14.840000</td>\n",
       "      <td>1.450000</td>\n",
       "      <td>3.200000e+01</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>53305.000000</td>\n",
       "      <td>5.496966e+06</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>2023.000000</td>\n",
       "      <td>68.310000</td>\n",
       "      <td>49.890000</td>\n",
       "      <td>3.240000</td>\n",
       "      <td>6.800000e+01</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>78498.000000</td>\n",
       "      <td>7.733869e+06</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>2023.000000</td>\n",
       "      <td>173.160000</td>\n",
       "      <td>125.570000</td>\n",
       "      <td>6.890000</td>\n",
       "      <td>1.700000e+02</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>99984.000000</td>\n",
       "      <td>9.998480e+06</td>\n",
       "      <td>52.000000</td>\n",
       "      <td>2023.000000</td>\n",
       "      <td>1396.230000</td>\n",
       "      <td>846.270000</td>\n",
       "      <td>46.430000</td>\n",
       "      <td>3.958244e+06</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          client_id      order_id    order_week    order_year    unit_price  \\\n",
       "count  54639.000000  5.463900e+04  54639.000000  54639.000000  54639.000000   \n",
       "mean   54837.869416  5.470190e+06     11.359139   2022.993064    136.267207   \n",
       "std    25487.438231  2.599807e+06      7.023499      0.082997    183.873135   \n",
       "min    10033.000000  1.000886e+06      1.000000   2022.000000      0.010000   \n",
       "25%    33593.000000  3.196372e+06      6.000000   2023.000000     20.800000   \n",
       "50%    53305.000000  5.496966e+06     11.000000   2023.000000     68.310000   \n",
       "75%    78498.000000  7.733869e+06     17.000000   2023.000000    173.160000   \n",
       "max    99984.000000  9.998480e+06     52.000000   2023.000000   1396.230000   \n",
       "\n",
       "          unit_cost   unit_weight           qty   line_number  \n",
       "count  54639.000000  54639.000000  5.463900e+04  54639.000000  \n",
       "mean      99.446073      5.004116  5.702646e+02      2.979667  \n",
       "std      133.164267      5.326599  1.879552e+04      2.436320  \n",
       "min        0.010000      0.000000  0.000000e+00      0.000000  \n",
       "25%       14.840000      1.450000  3.200000e+01      1.000000  \n",
       "50%       49.890000      3.240000  6.800000e+01      3.000000  \n",
       "75%      125.570000      6.890000  1.700000e+02      5.000000  \n",
       "max      846.270000     46.430000  3.958244e+06      9.000000  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Use the describe function to gather some basic statistics\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b24b53cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 54639 entries, 0 to 54638\n",
      "Data columns (total 18 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   first        54639 non-null  object \n",
      " 1   last         54639 non-null  object \n",
      " 2   job          54639 non-null  object \n",
      " 3   phone        54639 non-null  object \n",
      " 4   email        54639 non-null  object \n",
      " 5   client_id    54639 non-null  int64  \n",
      " 6   order_id     54639 non-null  int64  \n",
      " 7   order_date   54639 non-null  object \n",
      " 8   order_week   54639 non-null  int64  \n",
      " 9   order_year   54639 non-null  int64  \n",
      " 10  item_id      54639 non-null  object \n",
      " 11  category     54639 non-null  object \n",
      " 12  subcategory  54639 non-null  object \n",
      " 13  unit_price   54639 non-null  float64\n",
      " 14  unit_cost    54639 non-null  float64\n",
      " 15  unit_weight  54639 non-null  float64\n",
      " 16  qty          54639 non-null  int64  \n",
      " 17  line_number  54639 non-null  int64  \n",
      "dtypes: float64(3), int64(6), object(9)\n",
      "memory usage: 7.5+ MB\n"
     ]
    }
   ],
   "source": [
    "# Use this space to do any additional research\n",
    "# and familiarize yourself with the data.\n",
    "df.info()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "551cb358",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "category\n",
       "consumables    23538\n",
       "furniture      11915\n",
       "software        8400\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# What three item categories had the most entries?\n",
    "df['category'].value_counts().head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "5f54e2cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "subcategory\n",
       "bathroom supplies    6424\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# For the category with the most entries, which subcategory had the most entries?\n",
    "df.loc[df['category']=='consumables','subcategory'].value_counts().head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "2db94379",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "client_id\n",
       "33615    220\n",
       "66037    211\n",
       "46820    209\n",
       "38378    207\n",
       "24741    207\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Which five clients had the most entries in the data?\n",
    "df['client_id'].value_counts().head(5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "a6635601",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[33615, 66037, 46820, 38378, 24741]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Store the client ids of those top 5 clients in a list.\n",
    "df['client_id'].value_counts().head(5).index.tolist()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "c88b8a3e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "33615"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# How many total units (the qty column) did the client with the most entries order order?\n",
    "df['client_id'].value_counts().idxmax()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "257fcd7d",
   "metadata": {},
   "source": [
    "## Part 2: Transform the Data\n",
    "Do we know that this client spent the more money than client 66037? If not, how would we find out? Transform the data using the steps below to prepare it for analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "0c25c4a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a column that calculates the subtotal for each line using the unit_price and the qty\n",
    "df['subtotal'] = df['unit_price'] * df['qty']\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "ac9dafc8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           first       last                      job               phone  \\\n",
      "0         Donald    Harding             Immunologist  793-904-7725x39308   \n",
      "1        Tiffany      Myers          Music therapist    201.442.4543x942   \n",
      "2        Shannon     Watson             Immunologist   687.737.9424x8503   \n",
      "3         Nathan      Baker    Accounting technician    827-788-8123x012   \n",
      "4      Christina   Schwartz             Chiropractor        265-829-3643   \n",
      "...          ...        ...                      ...                 ...   \n",
      "54634     Lauren      Reese           Radio producer  977.877.5272x11382   \n",
      "54635    Derrick      Moore                 Musician        358.661.5483   \n",
      "54636     Monica  Gutierrez         Graphic designer    294.805.9100x339   \n",
      "54637      Wanda    Solomon             Toxicologist       (311)767-4924   \n",
      "54638     Dwayne       Bell  Chief Financial Officer   606-619-7667x9508   \n",
      "\n",
      "                                     email  client_id  order_id  order_date  \\\n",
      "0         harding.donald.7185@sullivan.com      58515   8953482  2023-04-28   \n",
      "1        myers.t.6537@ferguson-johnson.net      37609   8069089  2023-05-19   \n",
      "2                    swatson8146@payne.net      57113   1902144  2023-01-29   \n",
      "3                   bakernathan@benson.com      46554   9031802  2023-04-25   \n",
      "4      christinaschwartz9252@mcconnell.com      92089   1322274  2023-05-28   \n",
      "...                                    ...        ...       ...         ...   \n",
      "54634   late_reese_4081@montoya-chavez.org      29043   9021716  2023-04-26   \n",
      "54635         derrick.moore.2602@pope.info      41908   6290153  2023-02-08   \n",
      "54636            gutierrezm3195@morris.org      35176   8692622  2023-03-05   \n",
      "54637            solomonwanda5962@ross.org      24485   7592730  2023-01-18   \n",
      "54638                     belld@galvan.com      24007   7489403  2023-01-04   \n",
      "\n",
      "       order_week  order_year  ...         subcategory unit_price unit_cost  \\\n",
      "0              17        2023  ...            wall art    1096.80    762.71   \n",
      "1              20        2023  ...                pens      24.95     15.09   \n",
      "2               4        2023  ...  project management      13.52      7.86   \n",
      "3              17        2023  ...                pens      36.42     24.85   \n",
      "4              21        2023  ...                misc     195.10    108.17   \n",
      "...           ...         ...  ...                 ...        ...       ...   \n",
      "54634          17        2023  ...           logistics      83.13     51.60   \n",
      "54635           6        2023  ...    kitchen supplies     206.59    175.46   \n",
      "54636           9        2023  ...   bathroom supplies      65.66     57.31   \n",
      "54637           3        2023  ...              stands       1.48      1.22   \n",
      "54638           1        2023  ...  project management       3.01      1.61   \n",
      "\n",
      "       unit_weight   qty  line_number   subtotal  shipping_price  total_price  \\\n",
      "0             7.50   105            1  115164.00               7    115164.00   \n",
      "1             1.49    21            0     523.95              10       523.95   \n",
      "2             1.68    39            6     527.28               7       527.28   \n",
      "3             1.23    29            3    1056.18               7      1056.18   \n",
      "4            46.43    20            1    3902.00              10      3902.00   \n",
      "...            ...   ...          ...        ...             ...          ...   \n",
      "54634         2.25    33            8    2743.29               7      2743.29   \n",
      "54635        11.70    47            0    9709.73               7      9709.73   \n",
      "54636         4.16   475            6   31188.50               7     31188.50   \n",
      "54637        18.04   112            0     165.76               7       165.76   \n",
      "54638         2.07  1031            5    3103.31               7      3103.31   \n",
      "\n",
      "       total_weight  \n",
      "0               210  \n",
      "1                42  \n",
      "2                78  \n",
      "3                58  \n",
      "4                40  \n",
      "...             ...  \n",
      "54634            66  \n",
      "54635            94  \n",
      "54636           950  \n",
      "54637           224  \n",
      "54638          2062  \n",
      "\n",
      "[54639 rows x 22 columns]\n"
     ]
    }
   ],
   "source": [
    "# Create a column for shipping price.\n",
    "# Assume a shipping price of $7 per pound for orders over 50 pounds and $10 per pound for items 50 pounds or under.\n",
    "df['shipping_price'] = 7\n",
    "weight_per_item = 2  # pounds\n",
    "df['total_weight'] = df['qty'] * weight_per_item\n",
    "df['shipping_price'] = df['total_weight'].apply(lambda x: 7 if x > 50 else 10)\n",
    "\n",
    "print(df)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "77f42c67",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a column for the total price using the subtotal and the shipping price along with a sales tax of 9.25%\n",
    "sales_tax_rate = 0.0925\n",
    "df['total_price'] = df['subtotal'] + df['shipping_price'] + (df['subtotal'] + df['shipping_price']) * sales_tax_rate\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "c82ad275",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           first       last                      job               phone  \\\n",
      "0         Donald    Harding             Immunologist  793-904-7725x39308   \n",
      "1        Tiffany      Myers          Music therapist    201.442.4543x942   \n",
      "2        Shannon     Watson             Immunologist   687.737.9424x8503   \n",
      "3         Nathan      Baker    Accounting technician    827-788-8123x012   \n",
      "4      Christina   Schwartz             Chiropractor        265-829-3643   \n",
      "...          ...        ...                      ...                 ...   \n",
      "54634     Lauren      Reese           Radio producer  977.877.5272x11382   \n",
      "54635    Derrick      Moore                 Musician        358.661.5483   \n",
      "54636     Monica  Gutierrez         Graphic designer    294.805.9100x339   \n",
      "54637      Wanda    Solomon             Toxicologist       (311)767-4924   \n",
      "54638     Dwayne       Bell  Chief Financial Officer   606-619-7667x9508   \n",
      "\n",
      "                                     email  client_id  order_id  order_date  \\\n",
      "0         harding.donald.7185@sullivan.com      58515   8953482  2023-04-28   \n",
      "1        myers.t.6537@ferguson-johnson.net      37609   8069089  2023-05-19   \n",
      "2                    swatson8146@payne.net      57113   1902144  2023-01-29   \n",
      "3                   bakernathan@benson.com      46554   9031802  2023-04-25   \n",
      "4      christinaschwartz9252@mcconnell.com      92089   1322274  2023-05-28   \n",
      "...                                    ...        ...       ...         ...   \n",
      "54634   late_reese_4081@montoya-chavez.org      29043   9021716  2023-04-26   \n",
      "54635         derrick.moore.2602@pope.info      41908   6290153  2023-02-08   \n",
      "54636            gutierrezm3195@morris.org      35176   8692622  2023-03-05   \n",
      "54637            solomonwanda5962@ross.org      24485   7592730  2023-01-18   \n",
      "54638                     belld@galvan.com      24007   7489403  2023-01-04   \n",
      "\n",
      "       order_week  order_year  ... unit_price unit_cost unit_weight   qty  \\\n",
      "0              17        2023  ...    1096.80    762.71        7.50   105   \n",
      "1              20        2023  ...      24.95     15.09        1.49    21   \n",
      "2               4        2023  ...      13.52      7.86        1.68    39   \n",
      "3              17        2023  ...      36.42     24.85        1.23    29   \n",
      "4              21        2023  ...     195.10    108.17       46.43    20   \n",
      "...           ...         ...  ...        ...       ...         ...   ...   \n",
      "54634          17        2023  ...      83.13     51.60        2.25    33   \n",
      "54635           6        2023  ...     206.59    175.46       11.70    47   \n",
      "54636           9        2023  ...      65.66     57.31        4.16   475   \n",
      "54637           3        2023  ...       1.48      1.22       18.04   112   \n",
      "54638           1        2023  ...       3.01      1.61        2.07  1031   \n",
      "\n",
      "       line_number   subtotal  shipping_price    total_price  total_weight  \\\n",
      "0                1  115164.00               7  125824.317500           210   \n",
      "1                0     523.95              10     583.340375            42   \n",
      "2                6     527.28               7     583.700900            78   \n",
      "3                3    1056.18               7    1161.524150            58   \n",
      "4                1    3902.00              10    4273.860000            40   \n",
      "...            ...        ...             ...            ...           ...   \n",
      "54634            8    2743.29               7    3004.691825            66   \n",
      "54635            0    9709.73               7   10615.527525            94   \n",
      "54636            6   31188.50               7   34081.083750           950   \n",
      "54637            0     165.76               7     188.740300           224   \n",
      "54638            5    3103.31               7    3398.013675          2062   \n",
      "\n",
      "       line_cost  \n",
      "0       80091.55  \n",
      "1         326.89  \n",
      "2         313.54  \n",
      "3         727.65  \n",
      "4        2173.40  \n",
      "...          ...  \n",
      "54634    1709.80  \n",
      "54635    8253.62  \n",
      "54636   27229.25  \n",
      "54637     143.64  \n",
      "54638    1666.91  \n",
      "\n",
      "[54639 rows x 23 columns]\n"
     ]
    }
   ],
   "source": [
    "# Create a column for the cost of each line using unit cost, qty, and\n",
    "# shipping price (assume the shipping cost is exactly what is charged to the client).\n",
    "df['line_cost'] = df['unit_cost'] * df['qty'] + df['shipping_price']\n",
    "print(df)\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "e2389018",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           first       last                      job               phone  \\\n",
      "0         Donald    Harding             Immunologist  793-904-7725x39308   \n",
      "1        Tiffany      Myers          Music therapist    201.442.4543x942   \n",
      "2        Shannon     Watson             Immunologist   687.737.9424x8503   \n",
      "3         Nathan      Baker    Accounting technician    827-788-8123x012   \n",
      "4      Christina   Schwartz             Chiropractor        265-829-3643   \n",
      "...          ...        ...                      ...                 ...   \n",
      "54634     Lauren      Reese           Radio producer  977.877.5272x11382   \n",
      "54635    Derrick      Moore                 Musician        358.661.5483   \n",
      "54636     Monica  Gutierrez         Graphic designer    294.805.9100x339   \n",
      "54637      Wanda    Solomon             Toxicologist       (311)767-4924   \n",
      "54638     Dwayne       Bell  Chief Financial Officer   606-619-7667x9508   \n",
      "\n",
      "                                     email  client_id  order_id  order_date  \\\n",
      "0         harding.donald.7185@sullivan.com      58515   8953482  2023-04-28   \n",
      "1        myers.t.6537@ferguson-johnson.net      37609   8069089  2023-05-19   \n",
      "2                    swatson8146@payne.net      57113   1902144  2023-01-29   \n",
      "3                   bakernathan@benson.com      46554   9031802  2023-04-25   \n",
      "4      christinaschwartz9252@mcconnell.com      92089   1322274  2023-05-28   \n",
      "...                                    ...        ...       ...         ...   \n",
      "54634   late_reese_4081@montoya-chavez.org      29043   9021716  2023-04-26   \n",
      "54635         derrick.moore.2602@pope.info      41908   6290153  2023-02-08   \n",
      "54636            gutierrezm3195@morris.org      35176   8692622  2023-03-05   \n",
      "54637            solomonwanda5962@ross.org      24485   7592730  2023-01-18   \n",
      "54638                     belld@galvan.com      24007   7489403  2023-01-04   \n",
      "\n",
      "       order_week  order_year  ... unit_cost unit_weight   qty  line_number  \\\n",
      "0              17        2023  ...    762.71        7.50   105            1   \n",
      "1              20        2023  ...     15.09        1.49    21            0   \n",
      "2               4        2023  ...      7.86        1.68    39            6   \n",
      "3              17        2023  ...     24.85        1.23    29            3   \n",
      "4              21        2023  ...    108.17       46.43    20            1   \n",
      "...           ...         ...  ...       ...         ...   ...          ...   \n",
      "54634          17        2023  ...     51.60        2.25    33            8   \n",
      "54635           6        2023  ...    175.46       11.70    47            0   \n",
      "54636           9        2023  ...     57.31        4.16   475            6   \n",
      "54637           3        2023  ...      1.22       18.04   112            0   \n",
      "54638           1        2023  ...      1.61        2.07  1031            5   \n",
      "\n",
      "        subtotal  shipping_price    total_price  total_weight  line_cost  \\\n",
      "0      115164.00               7  125824.317500           210   80091.55   \n",
      "1         523.95              10     583.340375            42     326.89   \n",
      "2         527.28               7     583.700900            78     313.54   \n",
      "3        1056.18               7    1161.524150            58     727.65   \n",
      "4        3902.00              10    4273.860000            40    2173.40   \n",
      "...          ...             ...            ...           ...        ...   \n",
      "54634    2743.29               7    3004.691825            66    1709.80   \n",
      "54635    9709.73               7   10615.527525            94    8253.62   \n",
      "54636   31188.50               7   34081.083750           950   27229.25   \n",
      "54637     165.76               7     188.740300           224     143.64   \n",
      "54638    3103.31               7    3398.013675          2062    1666.91   \n",
      "\n",
      "             profit  \n",
      "0      45732.767500  \n",
      "1        256.450375  \n",
      "2        270.160900  \n",
      "3        433.874150  \n",
      "4       2100.460000  \n",
      "...             ...  \n",
      "54634   1294.891825  \n",
      "54635   2361.907525  \n",
      "54636   6851.833750  \n",
      "54637     45.100300  \n",
      "54638   1731.103675  \n",
      "\n",
      "[54639 rows x 24 columns]\n"
     ]
    }
   ],
   "source": [
    "# Create a column for the profit of each line using line cost and line price\n",
    "df['profit'] = df['total_price'] - df['line_cost']\n",
    "\n",
    "print(df)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef6f62b1",
   "metadata": {},
   "source": [
    "## Part 3: Confirm your work\n",
    "You have email receipts showing that the total prices for 3 orders. Confirm that your calculations match the receipts. Remember, each order has multiple lines.\n",
    "\n",
    "Order ID 2742071 had a total price of \\$152,811.89\n",
    "\n",
    "Order ID 2173913 had a total price of \\$162,388.71\n",
    "\n",
    "Order ID 6128929 had a total price of \\$923,441.25\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "c0e5d68e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{2742071: 152811.89, 2173913: 162388.71, 6128929: 923441.25}"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check your work using the totals above\n",
    "order_totals = df.groupby('order_id')['total_price'].sum()\n",
    "\n",
    "{2742071: 152811.89,2173913: 162388.71,6128929: 923441.25}\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b94d58ab",
   "metadata": {},
   "source": [
    "## Part 4: Summarize and Analyze\n",
    "Use the new columns with confirmed values to find the following information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "7c005f34",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "client_id\n",
      "33615    6.380953e+06\n",
      "66037    8.737023e+06\n",
      "46820    7.995944e+06\n",
      "38378    9.161588e+06\n",
      "24741    7.666993e+07\n",
      "Name: total_price, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# How much did each of the top 5 clients by quantity spend? Check your work from Part 1 for client ids.\n",
    "client_spending = df.groupby('client_id')['total_price'].sum()\n",
    "top_clients = df['client_id'].value_counts().head(5).index\n",
    "top_clients_spending = client_spending[top_clients]\n",
    "print(top_clients_spending)\n",
    "total_shipping_price=('shipping_price', 'sum'),\n",
    "total_revenue=('total_price', 'sum'),\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "81b6e4d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a summary DataFrame showing the totals for the for the top 5 clients with the following information:\n",
    "# total units purchased, total shipping price, total revenue, and total profit. \n",
    "top_clients = pd.DataFrame({\n",
    "    'client_id': [33615, 66037, 46820, 38378, 24741],\n",
    "    'total_price': [6.380953e+06, 8.737023e+06, 7.995944e+06, 9.161588e+06, 7.666993e+07]})\n",
    "top_clients_info = pd.merge(top_clients, df, on='client_id', how='inner')\n",
    "client_summary = top_clients_info.groupby('client_id').agg(total_units_purchased=('qty', 'sum'))\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "id": "7be02867",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Shipping (in millions) Total Revenue (in millions) Total Cost (in millions)  \\\n",
      "0                  $5.13                      $82.27                   $45.69   \n",
      "1                  $3.43                      $12.91                    $9.63   \n",
      "2                  $1.40                      $10.26                    $7.00   \n",
      "3                  $1.60                       $9.74                    $7.01   \n",
      "4                  $1.83                       $8.38                    $6.18   \n",
      "\n",
      "  Total Profit (in millions)  \n",
      "0                     $36.58  \n",
      "1                      $3.27  \n",
      "2                      $3.26  \n",
      "3                      $2.74  \n",
      "4                      $2.20  \n",
      "Money Columns:\n",
      "$5000000 is equal to 5.0 million\n",
      "   Shipping (millions)  Total Revenue (millions)  Total Cost (millions)  \\\n",
      "0             0.000005                  0.000082               0.000046   \n",
      "1             0.000003                  0.000013               0.000010   \n",
      "2             0.000001                  0.000010               0.000007   \n",
      "3             0.000002                  0.000010               0.000007   \n",
      "4             0.000002                  0.000008               0.000006   \n",
      "\n",
      "   Total Profit (millions)  \n",
      "0                 0.000037  \n",
      "1                 0.000003  \n",
      "2                 0.000003  \n",
      "3                 0.000003  \n",
      "4                 0.000002  \n",
      "   Shipping (in millions)  Total Revenue (in millions)  \\\n",
      "0                5.126448                    82.268892   \n",
      "1                3.429455                    12.906551   \n",
      "2                1.395152                    10.259515   \n",
      "3                1.601449                     9.743794   \n",
      "4                1.828985                     8.377309   \n",
      "\n",
      "   Total Cost (in millions)  Total Profit (in millions)  \n",
      "0                 45.688900                   36.579992  \n",
      "1                  9.634721                    3.271830  \n",
      "2                  7.004483                    3.255032  \n",
      "3                  7.007192                    2.736603  \n",
      "4                  6.175314                    2.201995  \n"
     ]
    }
   ],
   "source": [
    "# Format the data and rename the columns to names suitable for presentation.\n",
    "df.columns = ['Shipping (in millions)', 'Total Revenue (in millions)', 'Total Cost (in millions)', 'Total Profit (in millions)']\n",
    "\n",
    "df['Shipping (in millions)'] = df['Shipping (in millions)'].map('${:,.2f}'.format)\n",
    "df['Total Revenue (in millions)'] = df['Total Revenue (in millions)'].map('${:,.2f}'.format)\n",
    "df['Total Cost (in millions)'] = df['Total Cost (in millions)'].map('${:,.2f}'.format)\n",
    "df['Total Profit (in millions)'] = df['Total Profit (in millions)'].map('${:,.2f}'.format)\n",
    "\n",
    "print(df)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Define the money columns. \n",
    "money_columns = ['Shipping (millions)', 'Total Revenue (millions)', 'Total Cost (millions)', 'Total Profit (millions)']\n",
    "print(\"Money Columns:\")\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Define a function that converts a dollar amount to millions.\n",
    "def dollars_to_millions(dollar_amount):return dollar_amount / 1000000\n",
    "dollar_amount = 5000000  # $5,000,000\n",
    "million_amount = dollars_to_millions(dollar_amount)\n",
    "print(f\"${dollar_amount} is equal to {million_amount} million\")\n",
    "\n",
    "# Apply the currency_format_millions function to only the money columns. \n",
    "data = {\n",
    "    'Shipping (millions)': [5.126448, 3.429455, 1.395152, 1.601449, 1.828985],\n",
    "    'Total Revenue (millions)': [82.268892, 12.906551, 10.259515, 9.743794, 8.377309],\n",
    "    'Total Cost (millions)': [45.688900, 9.634721, 7.004483, 7.007192, 6.175314],\n",
    "    'Total Profit (millions)': [36.579992, 3.271830, 3.255032, 2.736603, 2.201995]}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "def dollars_to_millions(dollar_amount):\n",
    "    return dollar_amount / 1000000\n",
    "\n",
    "df[money_columns] = df[money_columns].apply(lambda x: x.map(dollars_to_millions))\n",
    "print(df)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Rename the columns to reflect the change in the money format. \n",
    "data = {\n",
    "    'Shipping (millions)': [5.126448, 3.429455, 1.395152, 1.601449, 1.828985],\n",
    "    'Total Revenue (millions)': [82.268892, 12.906551, 10.259515, 9.743794, 8.377309],\n",
    "    'Total Cost (millions)': [45.688900, 9.634721, 7.004483, 7.007192, 6.175314],\n",
    "    'Total Profit (millions)': [36.579992, 3.271830, 3.255032, 2.736603, 2.201995]}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "new_column_names = {\n",
    "    'Shipping (millions)': 'Shipping (in millions)',\n",
    "    'Total Revenue (millions)': 'Total Revenue (in millions)',\n",
    "    'Total Cost (millions)': 'Total Cost (in millions)',\n",
    "    'Total Profit (millions)': 'Total Profit (in millions)'}\n",
    "\n",
    "df = df.rename(columns=new_column_names)\n",
    "\n",
    "print(df)\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "8ead0986",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Client ID  Units  Shipping (millions)  Total Revenue (millions)  \\\n",
      "0          4  24741             5.126448                 82.268892   \n",
      "1          3  38378             3.429455                 12.906551   \n",
      "2          1  66037             1.395152                 10.259515   \n",
      "3          2  46820             1.601449                  9.743794   \n",
      "4          0  33615             1.828985                  8.377309   \n",
      "\n",
      "   Total Cost (millions)  Total Profit (millions)  \n",
      "0              45.688900                36.579992  \n",
      "1               9.634721                 3.271830  \n",
      "2               7.004483                 3.255032  \n",
      "3               7.007192                 2.736603  \n",
      "4               6.175314                 2.201995  \n"
     ]
    }
   ],
   "source": [
    "# Sort the updated data by \"Total Profit (millions)\" form highest to lowest and assign the sort to a new DatFrame.\n",
    "data = {\n",
    "    'Client ID': [4, 3, 1, 2, 0],\n",
    "    'Units': [24741, 38378, 66037, 46820, 33615],\n",
    "    'Shipping (millions)': [5.126448, 3.429455, 1.395152, 1.601449, 1.828985],\n",
    "    'Total Revenue (millions)': [82.268892, 12.906551, 10.259515, 9.743794, 8.377309],\n",
    "    'Total Cost (millions)': [45.688900, 9.634721, 7.004483, 7.007192, 6.175314],\n",
    "    'Total Profit (millions)': [36.579992, 3.271830, 3.255032, 2.736603, 2.201995]}\n",
    "\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "sorted_df = df.sort_values(by='Total Profit (millions)', ascending=False)\n",
    "print(sorted_df)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "87e0e7f8-b60e-4e50-ab07-c36b6deed513",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
